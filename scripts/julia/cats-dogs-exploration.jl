## Load packages
using DelimitedFiles
using DataStructures
using Missings
using LinearAlgebra
using Distributions
using StatsBase

## include structures and functions
include("tree_structures.jl")
include("tree_functions.jl")
include("simulate_data.jl")

## Read in data
cats_dogs_out = readdlm("../cats-dogs/cats-dogs-ccdprobs.out")
cats_dogs_out[:,1] = map(x -> strip(x, [';']), cats_dogs_out[:,1])

## Get a single tree
text_tree = cats_dogs_out[1,1]

text_tree = "(1:0.0556631,2:0.0693414,((3:0.0739067,((4:0.039114,5:0.0372726):0.0130065,6:0.057055):0.00748735):0.0154953,(((((7:0.00397016,8:0.000611082):0.0220259,9:0.0203416):0.0245329,10:0.0530554):0.0427686,11:0.0850486):0.00315267,12:0.0918821):0.0877109):0.0095466)"
test_tree = grow_tree(text_tree)

## Get all trees
all_trees = map(tree -> grow_tree(tree), cats_dogs_out[:,1])

## String of aligned DNA
first_DNA_string = "ATGTTCATAAACCGGTGACTATTTTCAACTAATCACAAAGATATTGGTACTCTTTACCTTTTATTCGGTGCCTGAGCTGGCATGGTGGGGACTGCTCTTAGTCTTCTAATCCGGGCCGAACTGGGCCAACCTGGTACACTACTAGGAGATGATCAGATTTACAATGTAATCGTCACTGCCCATGCTTTTGTAATGATCTTTTTTATGGTGATGCCTATTATAATTGGAGGGTTCGGAAACTGATTGGTCCCATTAATAATTGGAGCTCCTGACATAGCATTTCCCCGAATAAACAACATGAGCTTCTGACTCCTCCCTCCATCCTTTCTACTCTTACTCGCCTCATCTATGGTAGAAGCCGGAGCAGGAACTGGGTGAACAGTATACCCACCCCTAGCCGGCAACCTGGCTCATGCAGGAGCATCCGTAGACCTAACTATTTTTTCACTACACCTGGCAGGTGTCTCCTCAATCTTGGGTGCTATTAATTTCATTACTACTATTATTAATATAAAACCTCCTGCCATGTCCCAATATCAAACACCTCTATTTGTCTGATCAGTCTTAATCACTGCTGTCTTACTACTTCTATCACTTCCAGTCTTAGCAGCGGGAATCACTATATTATTAACAGATCGAAACCTAAACACCACATTCTTTGACCCCGCTGGGGGAGGAGATCCTATCTTATACCAACACTTATTCTGATTCTTTGGCCATCCAGAAGTTTACATTTTAATCCTACCCGGTTTTGGGATAATCTCACATATTGTTACCTATTATTCAGGTAAAAAAGAACCCTTTGGCTACATGGGAATAGTTTGAGCCATGATATCAATCGGCTTCCTGGGCTTTATCGTATGAGCCCATCACATGTTTACTGTAGGAATGGATGTAGACACACGAGCATACTTTACATCAGCCACTATAATTATTGCCATTCCTACCGGGGTGAAAGTATTTAGTTGACTGGCTACTCTTCATGGAGGTAATATTAAATGGTCCCCTGCTATATTATGAGCCTTAGGCTTTATTTTCCTATTTACCGTAGGAGGCCTAACGGGAATTGTACTAGCAAACTCTTCATTAGACATTGTTCTTCACGACACATATTACGTAGTGGCCCACTTTCACTATGTCTTGTCAATAGGAGCAGTATTCGCTATCATAGGAGGCTTCGTCCATTGATTCCCCCTATTCTCAGGATATACCCTTGACAACACTTGAGCAAAGATTCACTTTACGATTATGTTTGTAGGAGTCAATATAACGTTCTTCCCTCAGCACTTCCTAGGCCTGTCCGGAATGCCACGACGTTATTCTGACTATCCAGATGCATATACAACTTGAAATACGATTTCCTCAATGGGCTCTTTCATCTCATTAACAGCAGTCATGTTAATAGTTTTCATAGTGTGAGAAGCTTTCGCATCCAAGCGAGAAGTGGCCATAGTAGAACTAACCACAACTAATCTTGAATGATTGCATGGATGTCCTCCTCCGTACCACACATTTGAAGAGCCAACTTACGTACTATTAAAATAA"

## Transition matrix
Q = [[-1.2 0.4 0.2 0.4]; [0.2 -1.2 0.4 0.4]; [0.4 0.4 -1.2 0.2]; [0.4 0.4 0.2 -1.2]]

Tree = all_trees[1]
first_DNA = first_DNA_string

##
simulated_data = sim_data(all_trees[1], first_DNA_string, Q, true, true)

Tree = simulated_data
extract_aligned_DNA(simulated_data)

open("test_output.nex", "w") do io
    writedlm(io, extract_aligned_DNA(simulated_data))
end
